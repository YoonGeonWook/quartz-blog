# Assign libraries
suppressPackageStartupMessages({
library(tidyverse)
library(mlr)
})
# 4.3 Risk Factors for Cervical Cancer data
cervical <- read.csv("./data/risk_factors_cervical_cancer.csv", na.strings = c("?"), stringsAsFactors = F)
cervical <- read.csv("../data/risk_factors_cervical_cancer.csv", na.strings = c("?"), stringsAsFactors = F)
cervical <- cervical %>%
select(-c(Citology, Schiller, Hinselmann)) %>%
mutate(Biopsy = factor(Biopsy, levels = c(0,1), labels = c("Healthy", "Cancer"))) %>%
# subset variables to the ones that should be used in the book
select(Age, Number.of.sexual.partners, First.sexual.intercourse,
Num.of.pregnancies, Smokes, Smokes..years., Hormonal.Contraceptives, Hormonal.Contraceptives..years.,
IUD, IUD..years., STDs, STDs..number., STDs..Number.of.diagnosis, STDs..Time.since.first.diagnosis,
STDs..Time.since.last.diagnosis, Biopsy)
write_csv("../data/cervical.csv")
cervical
cervical %>% str()
write.csv("../data/cervical.csv")
write_csv(cervical, file = "../data/cervical.csv")
## NA imputation
imputer = mlr::imputeMode()
cervical_impute <- cervical %>%
mlr::impute(classes = list(numeric = imputeMode()))
cervical <- cervical_impute$data
cervical
cervical %>% write_csv("../data/cervical.csv")
cervical %>% dim()
cervical2 <- read.csv("../data/cervical.csv")
cervical2 %>% dim()
cervical2 == cervical
which(cervical2 != cervical)
setwd("../")
source("./utils.R")
source("./ggplot-theme.R")
source("./coef-plot.R")
source("./effect-plot.R")
source("./code.R")
source("./lime.R")
source("./get-text-classifier.R")
# Assign libraries
suppressPackageStartupMessages({
library(tidyverse)
library(mlr) # ML in r
library(tidymodels)
library(iml) # Interpretable Machine Learning in R
library(tictoc)
library(gridExtra)
library(tm) # A framework for text mining applications within R
library(anchors) # anchor in R
library(jsonlite) # anchorOnR
library(BBmisc)   # anchorOnR
library(uuid)     # anchorOnR
library(magrittr) # anchorOnR
library(caret)
})
install.packages("shapviz")
library(xgboost)
library(patchwork)
set.seed(1)
# Build model
x <- c("carat", "cut", "color", "clarity")
diamonds
diamonds[x]
data.matrix(diamonds[x])
dtrain <- xgb.DMatrix(data.matrix(diamonds[x]), label = diamonds$price, nthread = 1)
fit <- xgb.train(
param = list(learning_rate = 0.1, nthread = 1), data = dtrain, nrounds = 65
)
fit
# SHAP analysis:X can even contain factors
dia_2000 <- diamonds[sample(nrow(diamonds), 2000), x]
library(shapviz)
library(kernelshap)
install.packages("kernelshap")
library(tidymodels)
library(kernelshap)
library(shapviz)
iris_recipe <- iris %>%
recipe(Sepal.Length ~ .)
reg <- linear_reg() %>%
set_engine("lm")
iris_wf <- workflow() %>%
add_recipe(iris_recipe) %>%
add_model(reg)
fit <- iris_wf %>%
fit(iris)
shap <- kernelshap(fit, iris[, -1], bg_X = iris) %>%
shapviz()
sv_importance(shap, kind = "bee")
sv_dependence(shap, "Petal.Length")
sv_importance(shap, kind = "bee")
sv_dependence(shap, "Petal.Length")
shp <- shapviz(object = fit, X_pred = data.matrix(dia_2000), X = dia_2000)
fit <- xgb.train(
param = list(learning_rate = 0.1, nthread = 1), data = dtrain, nrounds = 65
)
shp <- shapviz(object = fit, X_pred = data.matrix(dia_2000), X = dia_2000)
set.seed(1)
# Build model
x <- c("carat", "cut", "color", "clarity")
dtrain <- xgb.DMatrix(data.matrix(diamonds[x]), label = diamonds$price, nthread = 1)
fit <- xgb.train(
param = list(learning_rate = 0.1, nthread = 1), data = dtrain, nrounds = 65
)
# SHAP analysis:X can even contain factors
dia_2000 <- diamonds[sample(nrow(diamonds), 2000), x]
shp <- shapviz(object = fit, X_pred = data.matrix(dia_2000), X = dia_2000)
sv_importance(shp, show_numbers = T)
shp
sv_importance(shp, kind = "beeswarn")
sv_importance(shp, kind = "beeswarm")
sv_importance(shp, kind = "both")
sv_importance(shp, kind = "no")
sv_importance(shp)
tmp <- sv_importance(shp)
tmp$mapping
tmp$data
tmp$layers
tmp$coordinates
tmp$facet
shp$X
shp$S
shp$baseline
shp$S_inter
sv_dependence(shp)
sv_dependence(shp, v = x)
sv_waterfall(shp, row_id = 1)
sv_waterfall(shp, row_id = 1)
sv_waterfall(shp, row_id = 1)
sv_waterfall(shp, row_id = 1) +
theme(axis.text = element_text(size = 11))
shp$S[1]
tmp <- sv_waterfall(shp, row_id = 1)
tmp
tmp$data
shp$S[1]
shp$X[1]
shp$X[1, ]
shp$S %>% mean()
shp$S %>% sum()
shp$S %>% meadian()
shp$S %>% median()
sv_force(shp, row_id = 1)
sv_force(shp, row_id = 1:2)
tmp <- sv_force(shp, row_id = 1:2)
tmp$data
shp$X
sv_waterfall(shp, row_id = shp$X$color == "D")
sv_force(shp, row_id = shp$X$color == "D")
shp_i <- shapviz(
fit, X_pred = data.matrix(dia_2000[x]), X = dia_2000, interactions = T
)
install.packages("treeshap")
shp_i <- shapviz(
fit, X_pred = data.matrix(dia_2000[x]), X = dia_2000, interactions = T)
sv_dependence(shp_i, v = "carat")
sv_dependence(shp_i, v = "carat", interactions = T)
sv_dependence(shp_i, v = "carat", color_var = x, interactions = T)
sv_dependence(shp_i, v = "carat", color_var = x)
sv_interaction(shp_i)
sv_interaction(shp_i) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# LGBM
library(lightgbm)
iris[, 1]
iris
dtrain <- lgb.Dataset(data.matrix(iris[-1]), label = iris[, -1])
dtrain
dtrain
fit <- lgb.train(
params = list(learning_rate = 0.1, objective = "mse"),
data = dtrain,
nrounds = 20
)
dtrain <- lgb.Dataset(data.matrix(iris[-1]), label = iris[, 1])
fit <- lgb.train(
params = list(learning_rate = 0.1, objective = "mse"),
data = dtrain,
nrounds = 20
)
iris[, -1]
iris[-1]
iris[-"Species"]
dtrain <- lgb.Dataset(data.matrix(iris %>% select(-Species)), label = iris$Species)
dtrain
fit <- lgb.train(
params = list(learning_rate = 0.1, objective = "mse"),
data = dtrain,
nrounds = 20
)
dtrain <- lgb.Dataset(data.matrix(iris %>% select(-Species)), label = iris %>% select(Species))
fit <- lgb.train(
params = list(learning_rate = 0.1, objective = "mse"),
data = dtrain,
nrounds = 20
)
?lgb.train
iris[, 1]
iris %>% select(-1)
dtrain <- lgb.Dataset(data.matrix(iris[-1]), label = iris[, 1])
fit <- lgb.train(
params = list(learning_rate = 0.1, objective = "mse"),
data = dtrain,
nrounds = 20
)
fit
shp <- shapviz(fit, X_pred = data.matrix(iris[-1]), X = iris)
sv_importance(shp)
sv_importance(shp, show_numbers = T)
sv_dependence(shp)
sv_dependence(shp, v = "Petal.Length")
source("./utils.R")
source("./ggplot-theme.R")
source("./coef-plot.R")
source("./effect-plot.R")
source("./code.R")
source("./lime.R")
source("./get-text-classifier.R")
# Assign libraries
suppressPackageStartupMessages({
library(tidyverse)
library(mlr) # ML in r
library(tidymodels)
library(iml) # Interpretable Machine Learning in R
library(tictoc)
library(gridExtra)
library(tm) # A framework for text mining applications within R
library(anchors) # anchor in R
library(jsonlite) # anchorOnR
library(BBmisc)   # anchorOnR
library(uuid)     # anchorOnR
library(magrittr) # anchorOnR
library(caret)
library(shapviz)
})
library(treeshap)
library(ranger)
cervical %>% colnames()
mod <- ranger(Biopsy ~ ., data = cervical, num.trees = 100, seed = 42)
mod <- ranger(y = cervical$Biopsy, x = cervical %>% select(-Biopsy), num.trees = 100, seed = 42)
unified.mod <- ranger.unify(mod, cervical %>% select(-Biopsy))
unified.mod
cervical$Biopsy
cervical %>% select(-Biopsy)
unified.mod <- ranger.unify(mod, cervical %>% select(-Biopsy))
unified.mod
treeshp <- treeshap(mod, x = cervical %>% select(-Biopsy))
cervical %>% glimpse()
cervical %>% data.matrix()
cervical_mat <- data.matrix(cervical)
mod <- ranger(y = cervical_mat$Biopsy, x = cervical_mat %>% select(-Biopsy), num.trees = 100, seed = 42)
cervical_mat %>% select(-Biopsy)
cervical_mat %>% str()
cervical_mat[-16]
cervical_mat[, -16]
cervical_mat[, -16] %>% glimpse()
mod <- ranger(y = cervical_mat$Biopsy, x = cervical_mat[, -16], num.trees = 100, seed = 42)
cervical_mat$Biopsy
cervical_mat[, 16]
mod <- ranger(y = cervical_mat[, 16], x = cervical_mat[, -16], num.trees = 100, seed = 42)
unified.mod <- ranger.unify(mod, cervical %>% select(-Biopsy))
unified.mod <- ranger.unify(mod, cervical_mat[, -16])
treeshp <- treeshap(mod, x = cervical_mat[, -16])
treeshp <- treeshap(unified_model = unified.mod, x = cervical_mat[, -16])
treeshp <- treeshap(unified_model = unified.mod, x = cervical_mat[, -16], interactions = T)
shp <- shapviz(treeshp, X = cervical_mat[, -16], )
shp$S
shp$S_inter
shp$S %>% select(2)
shp$S %>% names()
shp$S %>% colnames()
shp$S[, 2]
shp$S[, 2] %>% mean()
shp$S[, 1] %>% mean()
sv_force(shp, row_id = 18)
sv_waterfall(shp, row_id = 18)
sv_force(shp, row_id = 19)
treeshp <- treeshap(unified_model = unified.mod, x = cervical_mat[, -16])
shp <- shapviz(treeshp, X = cervical_mat[, -16], )
sv_force(shp, row_id = 19)
treeshp <- treeshap(unified_model = unified.mod, x = cervical_mat[, -16], interactions = T)
shp <- shapviz(treeshp, X = cervical_mat[, -16], )
sv_force(shp, row_id = 19)
sv_force(shp, row_id = 7)
sv_dependence(shp, v = "Hormonal.Contraceptives..years")
sv_importance(shp)
sv_importance(shp)
shp <- shapviz(treeshp, X = cervical_mat[, -16], interactions = T)
sv_force(shp, row_id = 7)
shp <- shapviz(treeshp, X = cervical_mat[, -16])
sv_force(shp, row_id = 7)
sv_dependence(shp, v = "Hormonal.Contraceptives..years", color_var = "STDs")
sv_dependence(shp, v = "Hormonal.Contraceptives..years.", color_var = "STDs")
sv_dependence(shp, v = "Hormonal.Contraceptives..years.")
sv_dependence(shp, v = "Hormonal.Contraceptives..years.", color_var = NULL)
cervical %>% colnames()
shp$S[]
shp$S[2]
shp$S %>% dim()
shp$S[, 2]
shp$S[, 2] %>% mean()
setwd("C:/Users/USER/Desktop/quartz/content/R")
setwd("C:/Users/USER/Desktop/quartz/content/R/e-commerce/")
library(tidyverse)
df <- read_csv("../../data/Online Retail.csv", col_type = "ccciTdcc")
df <- read_csv("../../data/e-commerce/Online Retail.csv", col_type = "ccciTdcc")
df
df %>% summarytools::descr()
df %>% summarytools::freq()
df %>% glimpse()
df %>% summarytools::dfSummary()
df %>% summarytools::ctable()
df %>% head()
df %>% head()
options(width=200)
df %>% head()
df %>% glimpse()
### 결측치 확인
df %>% is.na() %>% colSums()
### 결측치 확인
df %>% is.na() %>% colSums()
### 결측치 확인
df %>% is.na() %>% colSums()
options(width = 10000)
### 결측치 확인
df %>% is.na() %>% colSums()
### 결측치 확인
df %>% is.na() %>% colSums() %>% write.table("clipboard")
df <- df %>% drop_na("CustomerID")
df %>% dim()
df %>% is.na() %>% colSum()
df %>% is.na() %>% colSums()
df %>% is.na() %>% colSums()
