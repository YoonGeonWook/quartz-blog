learn_rate = 0.05,
engine = "xgboost"
)
dia_wf <- workflow() %>%
add_recipe(dia_recipe) %>%
add_model(xgboost_model)
fit <- dia_wf %>%
fit(diamonds)
shap <- shapviz(extract_fit_engine(fit), X_pred = dia_small_prep, X = dia_small)
extract_fit_engine(fit)
fit
dia_wf
basic_models %>%
extract_workflow(c("dummy_trans_glmnet"))
glmnet_shap_test <- basic_models %>%
extract_workflow(c("dummy_trans_glmnet")) %>%
fit(test)
glmnet_shap_test %>% extract_fit_engine()
glmnet_model %>% extract_fit_engine()
shap <- shapviz(
glmnet_shap_test %>% extract_fit_engine(),
X_pred = glm_rec %>% prep() %>% bake(has_role('predictor'), new_data = test, composition = "matrix"),
X = test
)
glm_rec %>% prep() %>% bake(has_role('predictor'), new_data = test, composition = "matrix")
shap <- shapviz(
glmnet_shap_test %>% extract_fit_engine(),
X_pred = glm_rec %>% prep() %>% bake(has_role('predictor'), new_data = test, composition = "matrix"),
X = test
)
shap <- shapviz(
glmnet_shap_test %>% extract_fit_engine(),
X_pred = (glm_rec %>% prep() %>% bake(has_role('predictor'), new_data = test, composition = "matrix")),
X = test
)
glm_prep <- glm_rec %>% prep() %>% bake(has_role('predictor'), new_data = test, composition = "matrix")
shap <- shapviz(
glmnet_shap_test %>% extract_fit_engine(),
X_pred = glm_prep,
X = test
)
predict(glm_shap_test, head(test, 1), type = "prob")
predict(glmnet_shap_test, head(test, 1), type = "prob")
glmnet_shap_test
glmnet_shap_test$trained
glmnet_shap_test$post
glmnet_shap_test$fit
glmnet_shap_test$pre
kernelshap::kernelshap(glmnet_shap_test, test, bg_X = test, type = 'prob')
glmnet_shap_test
shapviz(glmnet_shap_test %>% extract_fit_engine())
shapviz(glmnet_shap_test)
??perm_importance
install.packages("hstats")
model <- basic_models %>%
extract_workflow(c("dummy_trans_glmnet")) %>%
fit(train)
model
predict(model, test)
predict(model, test, type = "prob")
predict(m, X, type = "prob")[, 1]
predict(model, test, type = "prob")[, 1]
predict(model, test, type = "prob")[[1]]
predict(model, test, type = "prob")[[2]]
pf <- function(m, X){
predict(m, X, type = "prob")[[2]]
}
glm_rec %>% select(all_predictors())
glm_rec %>% prep() %>% bake()
glm_rec %>% prep() %>% bake(train)
glm_rec %>% step_select(all_predictors())
glm_rec %>% step_select(all_predictors()) %>% prep() %>% bake(train) %>% colnames()
glm_rec
glmnet_model %>%
extract_fit_parsnip() %>%
vip::vip(num_features = 15, horizontal = T) +
theme_light()
glm_rec %>% step_select(all_predictors()) %>% prep() %>% bake(train) %>% colnames()
glm_rec %>% step_select(all_predictors()) %>% prep()
glm_rec %>% step_select(all_predictors()) %>% prep() %>% bake(test) %>% colnames()
glmnet_model %>%
extract_fit_parsnip() %>%
vip::vip(num_features = 16, horizontal = T) +
theme_light()
glmnet_model %>%
extract_fit_parsnip() %>%
vip::vip(num_features = 15, horizontal = T) +
theme_light()
train %>% dim()
imp <- hstats::perm_importance(model, X = test, y = "target", v = glm_rec %>% step_select(all_predictors()) %>% prep() %>% bake(test) %>% colnames(),
pred_fun = pf, loss = "logloss")
glm_rec %>% step_select(all_predictors()) %>% prep() %>% bake(test) %>% colnames()
imp <- hstats::perm_importance(model, X = test, y = "target", v = train %>% select(-c(bsym, CustomerID, target)) %>% colnames(),
pred_fun = pf, loss = "logloss")
imp <- hstats::perm_importance(model, X = test, y = "target", v = train %>% select(-c(bsym, CustomerID, target)) %>% colnames(),
pred_fun = pf)
imp
plot(imp)
imp
?kernelshape
?kernelshap
?treeshap
X_explain <- train[sample(1:nrow(train), 1000), ] %>% select(-c(bsym, CustomerID, target))
X_background <- train[sample(1:nrow(train), 200), ]
set.seed(123)
X_explain <- train[sample(1:nrow(train), 1000), ] %>% select(-c(bsym, CustomerID, target))
X_background <- train[sample(1:nrow(train), 200), ]
pf
system.time(
shap_values <- permshap(model, X = X_explain, bg_X = X_background, pred_fun = pf)
)
system.time(
shap_values <- kernelshap::permshap(model, X = X_explain, bg_X = X_background, pred_fun = pf)
)
train[sample(1:nrow(train), 1000), ] %>% select(-c(bsym, CustomerID, target))
glm_rec %>% prep() %>% bake(train) %>%
sample_n(1000)
X_explain <- glm_rec %>% prep() %>% bake(train) %>%
sample_n(1000)
system.time(
shap_values <- kernelshap::permshap(model, X = X_explain, bg_X = X_background, pred_fun = pf)
)
X_explain %>% colnames()
X_background %>% colnames()
X_background <- glm_rec %>% prep() %>% bake(train) %>%
sample_n(200)
system.time(
shap_values <- kernelshap::permshap(model, X = X_explain, bg_X = X_background, pred_fun = pf)
)
system.time(
shap_values <- kernelshap::kernelshap(model, X = X_explain, bg_X = X_background, pred_fun = pf)
)
model
fit
system.time(
shap_values <- kernelshap::kernelshap(model, X = X_explain, bg_X = X_background, pred_fun = pf)
)
model
X_explain %>% colnames()
X_explain <- train %>%
sample_n(1000)
X_background <- train %>%
sample_n(200)
system.time(
shap_values <- kernelshap::kernelshap(model, X = X_explain, bg_X = X_background, pred_fun = pf)
)
shp <- shapviz(shap_value)
shp <- shapviz(shap_values)
shp
shap_values
sv_importance(shp, show_numbers = T)
shp[1]
shp <- shapviz(shap_values, X = X_explain %>% select(-c(bsym, CustomerID, targer)))
shp <- shapviz(shap_values, X = X_explain %>% select(-c(bsym, CustomerID, target)))
shap_values
shap_values %>% class()
model
shap_values$basic_models %>%
extract_workflow(c("dummy_trans_glmnet"))
basic_models %>%
extract_workflow(c("dummy_trans_glmnet"))
basic_models %>%
extract_workflow(c("dummy_trans_glmnet")) %>%
fit(train)
basic_models %>%
extract_workflow(c("dummy_trans_glmnet")) %>%
fit(train) %>%
extract_fit_engine()
model <- basic_models %>%
extract_workflow(c("dummy_trans_glmnet")) %>%
fit(train) %>%
extract_fit_engine()
pf <- function(m, X){
predict(m, X, type = "prob")[[2]]
}
X_explain <- train %>%
sample_n(1000) %>%
select(-c(bsym, CustomerID, target))
X_background <- train %>%
sample_n(200) %>%
select(-c(bsym, CustomerID, target))
system.time( # 4 minutes
shap_values <- kernelshap::kernelshap(model, X = X_explain, bg_X = X_background, pred_fun = pf)
)
model <- basic_models %>%
extract_workflow(c("dummy_trans_glmnet")) %>%
fit(train) %>%
extract_fit_engine()
model
model$dim
model$npasses
model$beta
system.time( # 4 minutes
shap_values <- kernelshap::kernelshap(model, X = X_explain, bg_X = X_background, pred_fun = pf)
)
?shapviz
shap_values
shp <- shapviz(shap_values, X = X_explain %>% select(-c(bsym, CustomerID, target)))
shp <- shapviz(shap_values, X = X_explain)
X_explain <- train %>%
sample_n(1000)
shp <- shapviz(shap_values, X = X_explain)
shp
shp %>% select(-c(bsym))
shp[[1]]
sv_importance(shp[[1]], show_numbers = T, )
shp
model <- basic_models %>%
extract_workflow(c("dummy_trans_glmnet")) %>%
fit(train) %>%
extract_fit_engine()
pf <- function(m, X){
predict(m, X, type = "prob")[[2]]
}
set.seed(123)
X_explain <- train %>%
sample_n(1000) %>%
select(-c(bsym, CustomerID, target))
X_background <- train %>%
sample_n(200) %>%
select(-c(bsym, CustomerID, target))
system.time( # 4 minutes
shap_values <- kernelshap::kernelshap(model, X = X_explain, bg_X = X_background, pred_fun = pf)
)
model <- basic_models %>%
extract_workflow(c("dummy_trans_glmnet")) %>%
fit(train)
pf <- function(m, X){
predict(m, X, type = "prob")[[2]]
}
set.seed(123)
X_explain <- train %>%
sample_n(1000)
X_background <- train %>%
sample_n(200)
system.time( # 4 minutes
shap_values <- kernelshap::kernelshap(model, X = X_explain, bg_X = X_background, pred_fun = pf)
)
sv_importance(shp, show_numbers = T)
shp <- shapviz(shap_values)
sv_importance(shp, show_numbers = T) +
theme_light()
sv_importance(shp, show_numbers = T, max_display = 14) +
theme_light()
sv_importance(shp, show_numbers = T, max_display = 14, kind = "bee") +
theme_light()
sv_importance(shp, show_numbers = T, kind = "bee") +
theme_light()
sv_importance(shp, show_numbers = T, kind = "beeswarm", fill = ) +
theme_light()
sv_importance(shp, show_numbers = T, kind = "both", fill = ) +
theme_light()
getOption("shapviz.viridis_args")
sv_importance(shp, show_numbers = T, kind = "no") +
theme_light()
sv_importance(shp, show_numbers = T, kind = "no")
sv_importance(shp, show_numbers = T, kind = "bee") +
theme_light()
set.seed(123)
X_explain <- train %>%
sample_n(500)
X_background <- train %>%
sample_n(200)
system.time( # 4 minutes
shap_values <- kernelshap::kernelshap(model, X = X_explain, bg_X = X_background, pred_fun = pf)
)
shp <- shapviz(shap_values)
sv_importance(shp, show_numbers = T, max_display = 14) +
theme_light()
sv_importance(shp, kind = "bee", ) +
theme_light()
train %>% select(total_amt, max_amt) %>% summary()
glm_rec %>% prep() %>% bake(train) %>% colnames()
model <- basic_models %>%
extract_workflow(c("dummy_trans_glmnet")) %>%
fit(train) %>%
extract_fit_engine()
X_explain <- glm_rec %>% prep() %>% bake(train) %>%
sample_n(500)
model %>% predict(X_explain)
model %>% predict(train)
model %>% coef()
model %>% coef()
X_explain %>% colnames()
X_explain %>% colnames()
X_explain <- glm_rec %>% prep() %>% bake(train) %>% select(-c(bsym, CustomerID, target))
model %>% predict(X_explain)
X_explain
sample_n(500) %>%
as.matrix()
model %>% predict(X_explain)
sample_n(500) %>% as.data.frame()
model %>% predict(X_explain)
X_explain <- glm_rec %>% prep() %>% bake(train) %>% select(-c(bsym, CustomerID, target))
model %>% predict(X_explain)
?predict.glmnet
sample_n(500)
X_explain <- glm_rec %>% prep() %>% bake(train) %>% select(-c(bsym, CustomerID, target)) %>%
sample_n(500)
X_explain <- glm_rec %>% prep() %>% bake(train) %>% select(-c(bsym, CustomerID, target)) %>%
sample_n(500) %>% as.matrix()
model %>% predict(X_explain)
model
glm_rec %>% prep() %>% bake(train) %>% select(-c(bsym, CustomerID, target)) %>%
sample_n(500) %>% select(total_amt) %>% summary()
set.seed(123)
X_explain <- glm_rec %>% prep() %>% bake(train) %>% select(-c(bsym, CustomerID, target)) %>%
sample_n(500) %>% as.matrix()
X_background <- glm_rec %>% prep() %>% bake(train) %>% select(-c(bsym, CustomerID, target)) %>%
sample_n(200) %>% as.matrix()
set.seed(123)
X_explain <- glm_rec %>% prep() %>% bake(train) %>% select(-c(bsym, CustomerID, target)) %>%
sample_n(500) %>% as.matrix()
X_background <- glm_rec %>% prep() %>% bake(train) %>% select(-c(bsym, CustomerID, target)) %>%
sample_n(200) %>% as.matrix()
system.time( # 4 minutes
shap_values <- kernelshap::kernelshap(model, X = X_explain, bg_X = X_background, pred_fun = pf)
)
model <- basic_models %>%
extract_workflow(c("dummy_trans_glmnet")) %>%
fit(train)
glm_rec %>% prep() %>% bake(train) %>% select(-c(bsym, CustomerID, target)) %>%
sample_n(500) %>% colnames()
glm_rec %>% prep() %>% bake(train) %>%
sample_n(200) %>% colnames()
set.seed(123)
X_explain <- glm_rec %>% prep() %>% bake(train) %>%
sample_n(500)
X_background <- glm_rec %>% prep() %>% bake(train) %>%
sample_n(200)
system.time( # 4 minutes
shap_values <- kernelshap::kernelshap(model, X = X_explain, bg_X = X_background, pred_fun = pf)
)
basic_models %>%
extract_workflow(c("dummy_trans_glmnet"))
glm_rec
basic_rec %>%
step_YeoJohnson(all_numeric_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
prep() %>% bake(train) %>% colname()
basic_rec %>%
step_YeoJohnson(all_numeric_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
prep() %>% bake(train) %>% colnames()
X_explain <- basic_rec %>%
step_YeoJohnson(all_numeric_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
prep() %>% bake(train) %>%
sample_n(500)
set.seed(123)
X_explain <- basic_rec %>%
step_YeoJohnson(all_numeric_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
prep() %>% bake(train) %>%
sample_n(500)
X_background <- basic_rec %>%
step_YeoJohnson(all_numeric_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
prep() %>% bake(train) %>%
sample_n(200)
system.time( # 4 minutes
shap_values <- kernelshap::kernelshap(model, X = X_explain, bg_X = X_background, pred_fun = pf)
)
set.seed(123)
X_explain <- recipe(target ~ ., data = train) %>%
step_YeoJohnson(all_numeric_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
prep() %>% bake(train) %>%
sample_n(500)
X_background <- recipe(target ~ ., data = train) %>%
step_YeoJohnson(all_numeric_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
prep() %>% bake(train) %>%
sample_n(200)
system.time( # 4 minutes
shap_values <- kernelshap::kernelshap(model, X = X_explain, bg_X = X_background, pred_fun = pf)
)
rlang::last_trace()
recipe(target ~ ., data = train) %>%
step_YeoJohnson(all_numeric_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
prep() %>% bake(train) %>%
sample_n(200)
X_background <- train %>%
mutate(across(where(is.numeric), scale)) %>%
sample_n(200)
<- train %>%
X_background
model <- basic_models %>%
extract_workflow(c("dummy_trans_glmnet")) %>%
fit(train)
set.seed(123)
X_explain <- train %>%
mutate(across(where(is.numeric), ~(.x - mean(.x)/sd(.x)))) %>%
sample_n(500)
X_background <- train %>%
mutate(across(where(is.numeric), ~(.x - mean(.x)/sd(.x)))) %>%
sample_n(200)
system.time( # 4 minutes
shap_values <- kernelshap::kernelshap(model, X = X_explain, bg_X = X_background, pred_fun = pf)
)
set.seed(123)
X_explain <- train %>%
# mutate(across(where(is.numeric), ~(.x - mean(.x)/sd(.x)))) %>%
sample_n(500)
X_background <- train %>%
# mutate(across(where(is.numeric), ~(.x - mean(.x)/sd(.x)))) %>%
sample_n(200)
system.time( # 4 minutes
shap_values <- kernelshap::kernelshap(model, X = X_explain, bg_X = X_background, pred_fun = pf)
)
train %>% glimpse()
set.seed(123)
X_explain <- train %>%
mutate(across(c(where(is.numeric), -total_cnt), ~(.x - mean(.x)/sd(.x)))) %>%
sample_n(500)
X_background <- train %>%
mutate(across(c(where(is.numeric), -total_cnt), ~(.x - mean(.x)/sd(.x)))) %>%
sample_n(200)
system.time( # 4 minutes
shap_values <- kernelshap::kernelshap(model, X = X_explain, bg_X = X_background, pred_fun = pf)
)
shp
shp$X
shp$baseline
shp$S
shp$X
shp$X %>% glimpse()
shp$X %>%
mutate(across(where(is.numeric), scale))
shp$X <- shp$X %>%
mutate(across(where(is.numeric), scale))
sv_importance(shp, show_numbers = T, max_display = 14) +
theme_light()
sv_importance(shp, kind = "bee", ) +
theme_light()
shp$X
shp$X %>% select(total_amt, max_amt, total_qty) %>% summary()
X_explain <- train %>%
sample_n(500) %>%
as.matrix()
X_background <- train %>%
sample_n(200) %>%
as.matrix()
system.time( # 4 minutes
shap_values <- kernelshap::kernelshap(model, X = X_explain, bg_X = X_background, pred_fun = pf)
)
X_background
glm_rec %>% prep() %>% bake(train) %>% head()
glm_rec %>% prep() %>% bake(train) %>% select(total_amt, max_amt, total_qty) %>% summary()
basic_models %>%
extract_workflow(c("dummy_trans_glmnet"))
X <- glm_rec %>% prep() %>% bake(train) %>% select(-c(bsym, CustomerID, target))
X <- glm_rec %>% prep() %>% bake(train) %>% select(-c(bsym, CustomerID, target)) %>% as.matrix()
y <- glm_rec %>% prep() %>% bake(train) %>% pull(target)
model_tmp <- glmnet(x, y, family = 'binomial', alpha = 1, lambda = 1e-05)
model_tmp <- glmnet(X, y, family = 'binomial', alpha = 1, lambda = 1e-05)
model_tmp
model
model$fit
model_tmp
?predict.glmnet
set.seed(123)
X_explain <- glm_rec %>% prep() %>% bake(train) %>% select(-c(bsym, CustomerID, target)) %>%
sample_n(500) %>%
as.matrix()
X_background <- glm_rec %>% prep() %>% bake(train) %>% select(-c(bsym, CustomerID, target)) %>%
sample_n(200) %>%
as.matrix()
system.time( # 4 minutes
shap_values <- kernelshap::kernelshap(model_tmo, X = X_explain, bg_X = X_background, pred_fun = pf)
)
system.time( # 4 minutes
shap_values <- kernelshap::kernelshap(model_tmp, X = X_explain, bg_X = X_background, pred_fun = pf)
)
model_tmp %>% predict(X_explain)
model_tmp %>% predict(X_explain, type = 'response')
model_tmp %>% predict(X_explain, type = 'class')
model_tmp %>% predict(X_explain, type = 'class') %>% str()
model_tmp %>% predict(X_explain, type = 'class') %>% head()
model_tmp %>% predict(X_explain, type = 'response') %>% head()
model_tmp %>% predict(X_explain, type = 'response') %>% str()
model_tmp %>% predict(X_explain, type = 'response') %>% as.vector()
pf <- function(m, X){
predict(m, X, type = "response") %>% as.vector()
}
set.seed(123)
X_explain <- glm_rec %>% prep() %>% bake(train) %>% select(-c(bsym, CustomerID, target)) %>%
sample_n(500) %>%
as.matrix()
X_background <- glm_rec %>% prep() %>% bake(train) %>% select(-c(bsym, CustomerID, target)) %>%
sample_n(200) %>%
as.matrix()
system.time( # 4 minutes
shap_values <- kernelshap::kernelshap(model_tmp, X = X_explain, bg_X = X_background, pred_fun = pf)
)
shp <- shapviz(shap_values)
sv_importance(shp, show_numbers = T, max_display = 14) +
theme_light()
sv_importance(shp, kind = "bee", ) +
theme_light()
theme_light()
theme_light()
sv_importance(shp, kind = "bee") +
theme_light()
shp$X
sv_dependence(shp)
shp$X %>% colnames()
sv_dependence(shp, v = colnames(shp$X)[1:6])
sv_dependence(shp, v = colnames(shp$X)[1:6]) +
theme_light()
sv_dependence(shp, v = colnames(shp$X)[1:6])
